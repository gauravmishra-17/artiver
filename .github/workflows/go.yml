name: CICD - Go

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/**'
    types: [ opened, edited, synchronize, reopened ]

defaults:
  run:
    working-directory: './server'

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        env:
          GO_VERSION: 1.16
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Lint
        uses: golangci/golangci-lint-action@v2.5.2
        env:
          GOLANGCI-LINT_VERSION: v1.29
        with:
          skip-go-installation: true
          version: ${{ env.GOLANGCI-LINT_VERSION }}
          working-directory: './server/users'
      - name: Build
        run: make build
      - name: Kepp build artifact
        uses: actions/upload-artifact@v2
        with:
          name: 'build_artifact_${{ github.run_id }}'
          path: './server/bin/*'
      - name: Test
        run: cd users && make test
  scan:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: './server/'
      - name: Fail job when quality gate is red
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: './server/.scannerwork/report-task.txt'
  build_and_push_image:
    runs-on: ubuntu-latest
    needs: [ build_and_test, scan ]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: 'build_artifact_${{ github.run_id }}'
          path: './app/'
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: './server/users/Dockerfile'
          push: true
          tags: "${{ secrets.DOCKER_HUB_USERNAME }}/artiver_go:${{ github.run_id }}"
  deploy:
    runs-on: ubuntu-latest
    needs: [ build_and_test, scan, build_and_push_image ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy dev
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: echo 'Deploy to dev server...'
      - name: Deploy prod
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo 'Deploy to prod server...'